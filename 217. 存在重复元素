给你一个整数字组 nums 。如果任何值在数字组中出现至少两次 ，返回 true ；如果数字组中每个元素互不相同，返回 false 。
方法一：两个循环寻觅重建就结束
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        for(int i=0;i<nums.size()-1;i++)
        {
            for(int j=i+1;j<nums.size();j++)
                if(nums[i]==nums[j])
                    return true;
        }
        return false;

    }
};

方法二：先利用自带库的排序，然后比较相邻两个的大小是否一致
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size()-1;i++)
        {
            if(nums[i]==nums[i+1])
                return true;
        }
        return false;

    }
};

方法三：哈希表（未学会）
对于数组中每个元素，我们将它插入到哈希表中。如果插入一个元素时发现该元素已经存在于哈希表中，则说明存在重复的元素。
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        unordered_set<int> s;
        for (int x: nums) {
            if (s.find(x) != s.end()) {
                return true;
            }
            s.insert(x);
        }
        return false;
    }
};
